// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Endjin.SpecFlow.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TimeSpan Transformations")]
    public partial class TimeSpanTransformationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TimeSpanTransformations.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TimeSpan Transformations", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 1 day, 1 hour, 1 minute, 1 second")]
        public virtual void Transform1Day1Hour1Minute1Second()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 1 day, 1 hour, 1 minute, 1 second", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("a step contains the TimeSpan argument 1 day, 1 hour, 1 minute, 1 second", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table1.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "1"});
#line 6
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 4 hours, 3 minutes, 2 seconds")]
        public virtual void Transform5Days4Hours3Minutes2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 4 hours, 3 minutes, 2 seconds", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("a step contains the TimeSpan argument 5 days, 4 hours, 3 minutes, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table2.AddRow(new string[] {
                        "5",
                        "4",
                        "3",
                        "2"});
#line 12
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 4 hours, 3 minutes")]
        public virtual void Transform5Days4Hours3Minutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 4 hours, 3 minutes", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("a step contains the TimeSpan argument 5 days, 4 hours, 3 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table3.AddRow(new string[] {
                        "5",
                        "4",
                        "3",
                        "0"});
#line 18
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 3 minutes, 2 seconds")]
        public virtual void Transform5Days3Minutes2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 3 minutes, 2 seconds", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("a step contains the TimeSpan argument 5 days, 3 minutes, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table4.AddRow(new string[] {
                        "5",
                        "0",
                        "3",
                        "2"});
#line 24
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 4 hours, 2 seconds")]
        public virtual void Transform5Days4Hours2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 4 hours, 2 seconds", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("a step contains the TimeSpan argument 5 days, 4 hours, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table5.AddRow(new string[] {
                        "5",
                        "4",
                        "0",
                        "2"});
#line 30
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 4 hours, 3 minutes, 2 seconds")]
        public virtual void Transform4Hours3Minutes2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 4 hours, 3 minutes, 2 seconds", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("a step contains the TimeSpan argument 4 hours, 3 minutes, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table6.AddRow(new string[] {
                        "0",
                        "4",
                        "3",
                        "2"});
#line 36
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 4 hours")]
        public virtual void Transform5Days4Hours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 4 hours", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
 testRunner.Given("a step contains the TimeSpan argument 5 days, 4 hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table7.AddRow(new string[] {
                        "5",
                        "4",
                        "0",
                        "0"});
#line 42
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 3 minutes")]
        public virtual void Transform5Days3Minutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 3 minutes", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("a step contains the TimeSpan argument 5 days, 3 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table8.AddRow(new string[] {
                        "5",
                        "0",
                        "3",
                        "0"});
#line 48
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days, 2 seconds")]
        public virtual void Transform5Days2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days, 2 seconds", ((string[])(null)));
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("a step contains the TimeSpan argument 5 days, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table9.AddRow(new string[] {
                        "5",
                        "0",
                        "0",
                        "2"});
#line 54
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 4 hours, 3 minutes")]
        public virtual void Transform4Hours3Minutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 4 hours, 3 minutes", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("a step contains the TimeSpan argument 4 hours, 3 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table10.AddRow(new string[] {
                        "0",
                        "4",
                        "3",
                        "0"});
#line 60
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 4 hours, 2 seconds")]
        public virtual void Transform4Hours2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 4 hours, 2 seconds", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
 testRunner.Given("a step contains the TimeSpan argument 4 hours, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table11.AddRow(new string[] {
                        "0",
                        "4",
                        "0",
                        "2"});
#line 66
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 3 minutes, 2 seconds")]
        public virtual void Transform3Minutes2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 3 minutes, 2 seconds", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("a step contains the TimeSpan argument 3 minutes, 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table12.AddRow(new string[] {
                        "0",
                        "0",
                        "3",
                        "2"});
#line 72
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 5 days")]
        public virtual void Transform5Days()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 5 days", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("a step contains the TimeSpan argument 5 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table13.AddRow(new string[] {
                        "5",
                        "0",
                        "0",
                        "0"});
#line 78
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table13, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 4 hours")]
        public virtual void Transform4Hours()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 4 hours", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 83
 testRunner.Given("a step contains the TimeSpan argument 4 hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table14.AddRow(new string[] {
                        "0",
                        "4",
                        "0",
                        "0"});
#line 84
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 3 minutes")]
        public virtual void Transform3Minutes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 3 minutes", ((string[])(null)));
#line 88
this.ScenarioSetup(scenarioInfo);
#line 89
 testRunner.Given("a step contains the TimeSpan argument 3 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table15.AddRow(new string[] {
                        "0",
                        "0",
                        "3",
                        "0"});
#line 90
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform 2 seconds")]
        public virtual void Transform2Seconds()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform 2 seconds", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("a step contains the TimeSpan argument 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Days",
                        "Hours",
                        "Minutes",
                        "Seconds"});
            table16.AddRow(new string[] {
                        "0",
                        "0",
                        "0",
                        "2"});
#line 96
 testRunner.Then("the transformed TimeSpan should have", ((string)(null)), table16, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
